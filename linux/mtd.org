* MTD & ubifs with qemu verxpress-a9

- use NOR flash (-pflash - pflash_cfi01 driver)
** vexpress-a9

- allegedly problems with writes - http://u-boot.10912.n7.nabble.com/U-boot-and-UBI-problem-with-vexpress-board-td209805.html
- these were supposedly resolved with earlier patch - https://patchwork.ozlabs.org/patch/285464/
- 2 banks of flash
  - 64MB each, start at 0x04000000 and 0x44000000
  - uboot ~flinfo~ lists 128 sectors
- qemu defines 2 devices
  - there is a file for each device (vexpress.flash0, vexpress.flash1)
  - ~-drive file=nor0,if=pflash -drive file=nor1,if=pflash~
  - see qemu ~info block~, ~info qtree~
- visible as single ~/dev/mtd0~ under kernel, 128MB size
  #+BEGIN_SRC text
    root@vexpress-qemu:~# cat /proc/mtd
    dev:    size   erasesize  name
    mtd0: 08000000 00080000 "40000000.flash"
    mtd1: 02000000 00001000 "48000000.psram"
    root@vexpress-qemu:~# mtdinfo /dev/mtd0
    mtd0
    Name:                           40000000.flash
    Type:                           nor
    Eraseblock size:                524288 bytes, 512.0 KiB
    Amount of eraseblocks:          256 (134217728 bytes, 128.0 MiB)
    Minimum input/output unit size: 1 byte
    Sub-page size:                  1 byte
    Character device major/minor:   90:0
    Bad blocks are allowed:         false
    Device is writable:             true
  #+END_SRC

  We're expecting ~nor~ type flash.

- On kernel side, flash is listed in verxpress dts:

#+BEGIN_SRC text
    flash@0,00000000 {
      compatible = "arm,vexpress-flash", "cfi-flash";
      reg = <0 0x00000000 0x04000000>,
            <1 0x00000000 0x04000000>;
      bank-width = <4>;
    };
#+END_SRC

*** Commands

- prepare flash:

  #+BEGIN_SRC sh
    dd if=/dev/zero bs=1M count=64 | tr '\000' '\377' >! nor0
    dd if=/dev/zero bs=1M count=64 | tr '\000' '\377' >! nor1
    # add 'nor*' at the beginnig of each bank
    echo nor0 | dd of=nor0 conv=notrunc
    echo nor1 | dd of=nor0 conv=notrunc
  #+END_SRC

- display flash contents (inside qemu):

  #+BEGIN_SRC text
    # first bank
    root@vexpress-qemu:~# dd if=/dev/mtd0ro bs=1M count=1 skip=0 | od -c
    0000000    n   o   r   0  \n 377 377 377 377 377 377 377 377 377 377 377
    0000020  377 377 377 377 377 377 377 377 377 377 377 377 377 377 377 377
    # second bank
    root@vexpress-qemu:~# dd if=/dev/mtd0ro bs=1M count=1 skip=64 | od -c
    0000000    n   o   r   1  \n 377 377 377 377 377 377 377 377 377 377 377
    0000020  377 377 377 377 377 377 377 377 377 377 377 377 377 377 377 377
  #+END_SRC

- write something to flash (inside qemu):

  #+BEGIN_SRC text
    root@vexpress-qemu:~# echo barbarbarbar > /tmp/t
    root@vexpress-qemu:~# flashcp -v /tmp/t /dev/mtd0
    Erasing blocks: 1/1 (100%)
    Writing data: 0k/0k (100%)
    Verifying data: 0k/0k (100%)
    root@vexpress-qemu:~# dd if=/dev/mtd0ro bs=1M count=1 skip=0 | od -c
    0000000    b   a   r   b   a   r   b   a   r   b   a   r  \n 377 377 377
    0000020  377 377 377 377 377 377 377 377 377 377 377 377 377 377 377 377
    ,*
    1+0 records in
    1+0 records out
    4000000
  #+END_SRC

- ubifs

  Format empty flash

  #+BEGIN_SRC text
    root@vexpress-qemu:~# ubiformat /dev/mtd0 -y
    ubiformat: mtd0 (nor), size 134217728 bytes (128.0 MiB), 256 eraseblocks of 524288 bytes (512.0 KiB), min. I/O size 1 bytes
    libscan: scanning eraseblock 255 -- 100 % complete
    ubiformat: 256 eraseblocks have valid erase counter, mean value is 0
    ubiformat: formatting eraseblock 255 -- 100 % complete
  #+END_SRC

  Attach UBI device

  #+BEGIN_SRC text
    root@vexpress-qemu:~# ubiattach -p /dev/mtd0
    [ 2353.743873] ubi0: attaching mtd0
    [ 2353.780146] ubi0: scanning is finished
    [ 2353.835455] ubi0: attached mtd0 (name "40000000.flash", size 128 MiB)
    [ 2353.836803] ubi0: PEB size: 524288 bytes (512 KiB), LEB size: 524160 bytes
    [ 2353.837087] ubi0: min./max. I/O unit sizes: 1/4096, sub-page size 1
    [ 2353.837340] ubi0: VID header offset: 64 (aligned 64), data offset: 128
    [ 2353.837603] ubi0: good PEBs: 256, bad PEBs: 0, corrupted PEBs: 0
    [ 2353.837830] ubi0: user volume: 0, internal volumes: 1, max. volumes count: 128
    [ 2353.838126] ubi0: max/mean erase counter: 1/1, WL threshold: 4096, image sequence number: 1130805531
    [ 2353.838406] ubi0: available PEBs: 252, total reserved PEBs: 4, PEBs reserved for bad PEB handling: 0
    [ 2353.838860] ubi0: background thread "ubi_bgt0d" started, PID 16747
    UBI device number 0, total 256 LEBs (134184960 bytes, 128.0 MiB), available 252 LEBs (132088320 bytes, 126.0 MiB), LEB size 524160 bytes (511.9 KiB)
  #+END_SRC

  Alternatively use ~ubi.mtd=0~ in kernel command line (or partition name if
  using named MTD partitions).

  Display UBI info

  #+BEGIN_SRC text
    root@vexpress-qemu:~# ubinfo
    UBI version:                    1
    Count of UBI devices:           1
    UBI control device major/minor: 10:59
    Present UBI devices:            ubi0
  #+END_SRC

  Display info about ~/dev/ubi0~

  #+BEGIN_SRC
    root@vexpress-qemu:~# ubinfo /dev/ubi0
    ubi0
    Volumes count:                           0
    Logical eraseblock size:                 524160 bytes, 511.9 KiB
    Total amount of logical eraseblocks:     256 (134184960 bytes, 128.0 MiB)
    Amount of available logical eraseblocks: 252 (132088320 bytes, 126.0 MiB)
    Maximum count of volumes                 128
    Count of bad physical eraseblocks:       0
    Count of reserved physical eraseblocks:  0
    Current maximum erase counter value:     1
    Minimum input/output unit size:          1 byte
    Character device major/minor:            252:0
  #+END_SRC

  Create volumes for rootfs1 and rootfs2 and display them.

  #+BEGIN_SRC text
    root@vexpress-qemu:~# ubimkvol /dev/ubi0 -N rootfs1 -s 32MiB
    Volume ID 0, size 65 LEBs (34070400 bytes, 32.5 MiB), LEB size 524160 bytes (511.9 KiB), dynamic, name "rootfs1", alignment 1
    root@vexpress-qemu:~# ubimkvol /dev/ubi0 -N rootfs2 -s 32MiB
    Volume ID 1, size 65 LEBs (34070400 bytes, 32.5 MiB), LEB size 524160 bytes (511.9 KiB), dynamic, name "rootfs2", alignment 1
    root@vexpress-qemu:~# ubinfo /dev/ubi0_0
    Volume ID:   0 (on ubi0)
    Type:        dynamic
    Alignment:   1
    Size:        65 LEBs (34070400 bytes, 32.5 MiB)
    State:       OK
    Name:        rootfs1
    Character device major/minor: 252:1
    root@vexpress-qemu:~# ubinfo /dev/ubi0_1
    Volume ID:   1 (on ubi0)
    Type:        dynamic
    Alignment:   1                  <--- NOR???
    Size:        65 LEBs (34070400 bytes, 32.5 MiB)
    State:       OK
    Name:        rootfs2
    Character device major/minor: 252:2
  #+END_SRC

  Mount volume:

  #+BEGIN_SRC text
    root@vexpress-qemu:~# mount -t ubifs ubi0:rootfs1 /mnt
    [ 1262.470373] UBIFS (ubi0:0): background thread "ubifs_bgt0_0" started, PID 9710
    [ 1262.496288] UBIFS (ubi0:0): UBIFS: mounted UBI device 0, volume 0, name "rootfs1"
    [ 1262.501228] UBIFS (ubi0:0): LEB size: 524160 bytes (511 KiB), min./max. I/O unit sizes: 8 bytes/4096 bytes
    [ 1262.505788] UBIFS (ubi0:0): FS size: 28828800 bytes (27 MiB, 55 LEBs), journal size 4193281 bytes (3 MiB, 6 LEBs)
    [ 1262.510619] UBIFS (ubi0:0): reserved for root: 1361655 bytes (1329 KiB)
    [ 1262.515192] UBIFS (ubi0:0): media format: w4/r0 (latest is w4/r0), UUID BC7076A6-CE49-442C-8856-45B8BE533508, small LPT model
  #+END_SRC
