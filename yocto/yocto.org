* Yocto/OE

Bitbake reference:
http://www.yoctoproject.org/docs/current/bitbake-user-manual/bitbake-user-manual.html

Developer's manual:
https://www.yoctoproject.org/docs/current/dev-manual/dev-manual.html

Reference manual:
https://www.yoctoproject.org/docs/current/ref-manual/ref-manual.html


** site.conf

Override directory locations, ex:

#+BEGIN_SRC conf
  SCONF_VERSION = "1"
  DL_DIR = "/home/mborzecki/yocto/downloads"
  SSTATE_DIR = "/home/mborzecki/yocto/sstate-cache"
  RM_OLD_IMAGES = "1"
#+END_SRC

** Tasks

~do_populate_sysroot~ installs ~DEPENDS~. To have ~DEPENDS~ done
before running a task:

#+BEGIN_SRC conf
  do_sth[deptask] = "do_populate_sysroot""
#+END_SRC

** Recipes

*NOTE*: always set ~S~

*** Disable certain recipes

Set ~BBMASK~ to disable certain recipes. The recipes are not even
parsed. Note, ~BBMASK~ is a single regexp, must match all masked
recipes.

#+BEGIN_SRC conf
BBMASK ?= ".*/meta-ti/recipes-misc/(images|payload)/"
#+END_SRC

*** g-i-r

*NOTE*: OE packages have introspection disabled!.

Does not work when cross-compiled. Use [[https://github.com/meta-gir/meta-gir][meta-gir]].

*** Vala

Most VAPIs shipped with Vala out of the box. VAPI is generated based
on ~g-i-r~ output, not usable when doing cross-compilation. Possible
solution:

- build package on the host
- generate ~*.vapi~ and ~*.deps~
- ship VAPI files with ~*.bbappend*~, install files into
  ~${D}${datadir}/vala/vapi~

** wic

Creating images::

#+BEGIN_SRC sh
  wic create sdimage-part -e core-image-minimal -D -o /tmp/wic-image
#+END_SRC

** Build name

To put a build name in ~/etc/version~ set ~BUILDNAME~ in on of the
cont files (possibly ~local.comf~, or ~auto.conf~ if triggered from
Jenkins or other CI).

** kernel

*** Config fragments

For kernels that do not support config fragments, use *Poor Man's*
config fragment support:

#+BEGIN_SRC conf
  FILESEXTRAPATHS_prepend := "${THISDIR}/${PN}-${PV}:"
  # reorder *.cfg files as needed
  SRC_URI += "\
        file://usbserial.cfg \
        file://bridge.cfg \
	"

  do_configure_prepend() {

    cfgs="${@ ' '.join([n for n in src_patches(d, True) if n.endswith('.cfg')])}"

    bbnote "configs: ${cfgs}"
    if [ -n "${cfgs}" ]; then
        for cfg in "${cfgs}"; do
            bbnote "Applying config ${cfg}"
            cat ${cfg} >> ${WORKDIR}/defconfig
        done
    fi
  }
#+END_SRC

** Erlang

See [[https://github.com/joaohf/meta-erlang][meta-erlang]]. Recipe:

#+BEGIN_SRC conf
  inherit erlang
  # if uses rebar
  inherit rebar
#+END_SRC

*** Rebar

Fetch deps before building::

#+BEGIN_SRC conf
  do_rebar_deps() {
      cd ${S}
      ./rebar get-deps
  }

  do_rebar_deps[deptask] = "do_populate_sysroot"
  addtask rebar_deps after do_unpack before do_patch
#+END_SRC

*** Ports

Ports will require ~-lerl_interface -lei~. Broken when running with
~rebar~ set ~ERL_EI_LIBDIR~ otherwise it will pick a native libdir:

#+BEGIN_SRC conf
  do_compile() {
      ei_libdir=$(echo ${STAGING_LIBDIR}/erlang/lib/erl_interface-*/lib)
      ERL_EI_LIBDIR=$ei_libdir ./rebar compile
  }
#+END_SRC

~rebar~ is broken wrt. cross compilation, it's not possible to
override ~ERL_LDFLAGS~. It gets overwritten with the default
always. Every veriable that is expandable in the default env, see:
https://github.com/rebar/rebar/issues/348 default env:
https://github.com/rebar/rebar/blob/master/src/rebar_port_compiler.erl#L572
As a workaround, set ~ERL_EI_LIBDIR~ to the actual Erlang's lib
sysroot, so a patches ~do_compile~ could look like this:

#+BEGIN_SRC conf
  ERL_CFLAGS = "-I${STAGING_LIBDIR}/erlang/usr/include"
  ERL_LDFLAGS = "-L${STAGING_LIBDIR}/erlang/usr/lib -lerl_interface -lei"
  ERL_EI_LIBDIR = "${STAGING_LIBDIR}/erlang/usr/lib"

  do_compile() {

      # rebar is shit and ERL_LDFLAGS cannot be overridden because it's
      # expandable, see https://github.com/rebar/rebar/issues/348 try to
      # workaround by setting ERL_EI_LIBDIR that is used in the
      # following context:
      # ERL_LDFLAGS=-L$ERL_EI_LIBDIR -lerl_interface -lei'
      oe_runmake ERL_CFLAGS=${ERL_CFLAGS} ERL_EI_LIBDIR=${ERL_EI_LIBDIR} REBAR='rebar -vv' release
  }
#+END_SRC

Note, ~ERL_CLFAGS~ must to be set to something meaningful like this:

#+BEGIN_SRC conf
  ERL_CFLAGS = "-I${STAGING_LIBDIR}/erlang/usr/include"
#+END_SRC

Otherwise rebar compiled ports will pick up native headers, and you're
left with debugging why integers passed to/from port have
unexplainable values.

** Packages

*** Feeds

   To quickly generate locally avaialble feeds, use ~local-feeds~ from
   [[https://github.com/open-rnd/meta-openrnd][meta-openrnd]]. Assuming that we start an HTTP server on host
   ~192.168.1.100~ on port ~9999~, with root at ~${BASE_WORKDIR}~.
   First set ~FEEDADDR~:

   #+BEGIN_SRC conf
   FEEDADDR_pn-local-feeds = "http://192.168.1.100:9999/"
   #+END_SRC

   Enter ~${BASE_WORKDIR}~ and start python HTTP server listening on ~0.0.0.0:9999~

   #+BEGIN_SRC sh
   python3 -m http.server 9999
   #+END_SRC

   On target:

   #+BEGIN_SRC sh
   opkg update
   #+END_SRC

   Make sure to have ~package-management~ in ~IMAGE_FEATURES~, or opkg
   installed manually.

*** Local

    Use ~oe-pkgdata-util~, ex. find a file:

    #+BEGIN_SRC sh
      ~: oe-pkgdata-util find-path \*ctr.ko\*
      kernel-module-ctr: /lib/modules/4.1.10/kernel/crypto/ctr.ko
    #+END_SRC

** Cache

*** sstate

   Set ~SSTATE_MIRRORS~ (~PATH~ has special meaning, will be replaced with cache
   entry path by bb):

   #+BEGIN_SRC conf
     SSTATE_MIRRORS = " \
     file://.* http://172.27.0.30:9009/sstate-cache/PATH"
   #+END_SRC

   See task hash differences between cache & local build:

   #+BEGIN_SRC sh
     bitbake -S printdiff core-image-minimal
   #+END_SRC

   When exporting do not use `python3 -m http.server` as bb will hammer down the
   server with requests, use something reasonable like [[https://caddyserver.com/][caddy]].

   If that fails, inspect ~bitbake -DDD <target>~, look for ~SState~ debug logs.

*** downloads

   #+BEGIN_SRC conf
     PREMIRRORS_prepend = "\
      git://.*/.* http://172.27.0.30:9009/downloads/ \n \
      ftp://.*/.* http://172.27.0.30:9009/downloads/ \n \
      http://.*/.* http://172.27.0.30:9009/downloads/ \n \
      https://.*/.* http://172.27.0.30:9009/downloads/ \n"
   #+END_SRC
